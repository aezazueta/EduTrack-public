"""
Utilidades para la carga y manejo de configuraciones del proyecto
"""
import yaml
import os
from typing import Dict, Any
from pydantic import BaseModel, FilePath
from pathlib import Path

class PreprocessConfig(BaseModel):
    """Configuraci√≥n para el preprocesamiento de datos.
    
    Attributes:
        input_path: Directorio que contiene los archivos de entrada
        output_path: Directorio donde se guardar√°n los archivos procesados
        files: Configuraci√≥n de los archivos de entrada
    """
    input_path: str
    output_path: str
    version: str
    files: Dict[str, str]

def load_config(config_path: str) -> Dict[str, Any]:
    """Carga la configuraci√≥n desde un archivo YAML.
    
    Args:
        config_path: Ruta al archivo de configuraci√≥n YAML
        
    Returns:
        Dict[str, Any]: Diccionario con la configuraci√≥n
        
    Raises:
        FileNotFoundError: Si el archivo de configuraci√≥n no existe
        yaml.YAMLError: Si hay errores en el formato YAML
    """
    from src.utils.logging_utils import config_logging
    logger = config_logging()
    
    logger.info(f"üìÇ Cargando configuraci√≥n desde: {config_path}")
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config_dict = yaml.safe_load(f)
            
        #logger.debug(f"üîç Configuraci√≥n cargada: {config_dict}")
        logger.info("‚úÖ Configuraci√≥n cargada exitosamente")
        
        return config_dict
        
    except FileNotFoundError:
        logger.error(f"‚ùå Archivo de configuraci√≥n no encontrado: {config_path}")
        raise
    except yaml.YAMLError as e:
        logger.error(f"‚ùå Error en formato YAML: {str(e)}")
        raise
    except Exception as e:
        logger.error(f"‚ùå Error inesperado al cargar configuraci√≥n: {str(e)}")
        raise